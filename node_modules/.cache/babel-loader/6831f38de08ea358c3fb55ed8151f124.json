{"ast":null,"code":"import _objectWithoutProperties from \"/Users/guokai/Desktop/React-connect/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/guokai/Desktop/React-connect/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/guokai/Desktop/React-connect/src/Prism/Okadia/index22.jsx\";\n// import React, { useState, useEffect } from \"react\";\n// function Example() {\n//   const test = e => {\n//     setAdd(this.refs.add.innerHTML);\n//   };\n//   const [add, setAdd] = useState(\"\");\n//   return (\n//     <div>\n//       ã€€<div ref=\"add\" contenteditable=\"true\"></div>\n//       <button onClick={e => test(e)}></button>\n//       {/* <div\n//         contenteditable=\"true\"\n//         dangerouslySetInnerHTML={{ __html: { add } }}\n//       ></div> */}\n//     </div>\n//   );\n// }\n// export default Example;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst reduceTargetKeys = (target, keys, predicate) => Object.keys(target).reduce(predicate, {});\n\nconst omit = (target = {}, keys = []) => reduceTargetKeys(target, keys, (acc, key) => keys.some(omitKey => omitKey === key) ? acc : _objectSpread({}, acc, {\n  [key]: target[key]\n}));\n\nconst pick = (target = {}, keys = []) => reduceTargetKeys(target, keys, (acc, key) => keys.some(pickKey => pickKey === key) ? _objectSpread({}, acc, {\n  [key]: target[key]\n}) : acc);\n\nconst isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\nconst propTypes = {\n  content: PropTypes.string,\n  editable: PropTypes.bool,\n  focus: PropTypes.bool,\n  maxLength: PropTypes.number,\n  multiLine: PropTypes.bool,\n  sanitise: PropTypes.bool,\n  caretPosition: PropTypes.oneOf([\"start\", \"end\"]),\n  tagName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // The element to make contenteditable. Takes an element string ('div', 'span', 'h1') or a styled component\n  innerRef: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onPaste: PropTypes.func,\n  onChange: PropTypes.func,\n  styled: PropTypes.bool // If element is a styled component (uses innerRef instead of ref)\n\n};\nconst defaultProps = {\n  content: \"\",\n  editable: true,\n  focus: false,\n  maxLength: Infinity,\n  multiLine: false,\n  sanitise: true,\n  caretPosition: null,\n  tagName: \"div\",\n  innerRef: () => {},\n  onBlur: () => {},\n  onFocus: () => {},\n  onKeyDown: () => {},\n  onPaste: () => {},\n  onChange: () => {},\n  styled: false\n};\n\nclass ContentEditable extends Component {\n  constructor(props) {\n    super();\n\n    this.setFocus = () => {\n      if (this.props.focus && this._element) {\n        this._element.focus();\n      }\n    };\n\n    this.setCaret = () => {\n      const caretPosition = this.props.caretPosition;\n\n      if (caretPosition && this._element) {\n        const value = this.state.value;\n        const offset = value.length && caretPosition === \"end\" ? 1 : 0;\n        const range = document.createRange();\n        const selection = window.getSelection();\n        range.setStart(this._element, offset);\n        range.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    };\n\n    this._onChange = ev => {\n      const sanitise = this.props.sanitise;\n      const rawValue = this._element.innerText;\n      const value = sanitise ? this.sanitiseValue(rawValue) : rawValue;\n\n      if (this.state.value !== value) {\n        this.setState({\n          value: rawValue\n        }, () => {\n          this.props.onChange(ev, value);\n        });\n      }\n    };\n\n    this._onPaste = ev => {\n      const maxLength = this.props.maxLength;\n      ev.preventDefault();\n      const text = ev.clipboardData.getData(\"text\").substr(0, maxLength);\n      document.execCommand(\"insertText\", false, text);\n      this.props.onPaste(ev);\n    };\n\n    this._onBlur = ev => {\n      const sanitise = this.props.sanitise;\n      const rawValue = this._element.innerText;\n      const value = sanitise ? this.sanitiseValue(rawValue) : rawValue; // We finally set the state to the sanitised version (rather than the `rawValue`) because we're blurring the field.\n\n      this.setState({\n        value,\n        isFocused: false\n      }, () => {\n        this.props.onChange(ev, value);\n        this.forceUpdate();\n      });\n      this.props.onBlur(ev);\n    };\n\n    this._onFocus = ev => {\n      this.setState({\n        isFocused: true\n      });\n      this.props.onFocus(ev);\n    };\n\n    this._onKeyDown = ev => {\n      const _this$props = this.props,\n            maxLength = _this$props.maxLength,\n            multiLine = _this$props.multiLine;\n      const value = this._element.innerText; // return key\n\n      if (!multiLine && ev.keyCode === 13) {\n        ev.preventDefault();\n        ev.currentTarget.blur(); // Call onKeyUp directly as ev.preventDefault() means that it will not be called\n\n        this._onKeyUp(ev);\n      } // Ensure we don't exceed `maxLength` (keycode 8 === backspace)\n\n\n      if (maxLength && !ev.metaKey && ev.which !== 8 && value.replace(/\\s\\s/g, \" \").length >= maxLength) {\n        ev.preventDefault(); // Call onKeyUp directly as ev.preventDefault() means that it will not be called\n\n        this._onKeyUp(ev);\n      }\n    };\n\n    this._onKeyUp = ev => {\n      // Call prop.onKeyDown callback from the onKeyUp event to mitigate both of these issues:\n      // Access to Synthetic event: https://github.com/ashleyw/react-sane-contenteditable/issues/14\n      // Current value onKeyDown: https://github.com/ashleyw/react-sane-contenteditable/pull/6\n      // this._onKeyDown can't be moved in it's entirety to onKeyUp as we lose the opportunity to preventDefault\n      this.props.onKeyDown(ev, this._element.innerText);\n    };\n\n    this.state = {\n      value: props.content,\n      isFocused: false\n    };\n  }\n\n  componentDidMount() {\n    this.setFocus();\n    this.setCaret();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.content !== this.sanitiseValue(this.state.value)) {\n      this.setState({\n        value: nextProps.content\n      }, () => {\n        if (!this.state.isFocused) this.forceUpdate();\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const propKeys = Object.keys(nextProps).filter(key => key !== \"content\");\n    return !isEqual(pick(nextProps, propKeys), pick(this.props, propKeys));\n  }\n\n  componentDidUpdate() {\n    this.setFocus();\n    this.setCaret();\n  }\n\n  sanitiseValue(val) {\n    const _this$props2 = this.props,\n          maxLength = _this$props2.maxLength,\n          multiLine = _this$props2.multiLine,\n          sanitise = _this$props2.sanitise;\n\n    if (!sanitise) {\n      return val;\n    } // replace encoded spaces\n\n\n    let value = val.replace(/&nbsp;/, \" \").replace(/[\\u00a0\\u2000-\\u200b\\u2028-\\u2029\\u202e-\\u202f\\u3000]/g, \" \");\n\n    if (multiLine) {\n      // replace any 2+ character whitespace (other than new lines) with a single space\n      value = value.replace(/[\\t\\v\\f\\r ]+/g, \" \");\n    } else {\n      value = value.replace(/\\s+/g, \" \");\n    }\n\n    return value.split(\"\\n\").map(line => line.trim()).join(\"\\n\").replace(/\\n{3,}/g, \"\\n\\n\") // replace 3+ line breaks with two\n    .trim().substr(0, maxLength);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          Element = _this$props3.tagName,\n          content = _this$props3.content,\n          editable = _this$props3.editable,\n          styled = _this$props3.styled,\n          props = _objectWithoutProperties(_this$props3, [\"tagName\", \"content\", \"editable\", \"styled\"]);\n\n    return React.createElement(Element, Object.assign({}, omit(props, Object.keys(propTypes)), styled ? {\n      innerRef: c => {\n        this._element = c;\n        props.innerRef(c);\n      }\n    } : {\n      ref: c => {\n        this._element = c;\n        props.innerRef(c);\n      }\n    }, {\n      style: _objectSpread({\n        minHeight: \"0.28rem\",\n        minWidth: \"100%\",\n        display: \"inline-block\",\n        whiteSpace: \"pre-wrap\",\n        wordWrap: \"break-word\",\n        wordBreak: \"break-all\"\n      }, props.style),\n      contentEditable: editable,\n      key: Date(),\n      dangerouslySetInnerHTML: {\n        __html: this.state.value\n      },\n      onBlur: this._onBlur,\n      onFocus: this._onFocus,\n      onInput: this._onChange,\n      onKeyDown: this._onKeyDown,\n      onKeyUp: this._onKeyUp,\n      onPaste: this._onPaste,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentEditable.propTypes = propTypes;\nContentEditable.defaultProps = defaultProps;\nexport default ContentEditable;","map":{"version":3,"sources":["/Users/guokai/Desktop/React-connect/src/Prism/Okadia/index22.jsx"],"names":["React","Component","PropTypes","reduceTargetKeys","target","keys","predicate","Object","reduce","omit","acc","key","some","omitKey","pick","pickKey","isEqual","a","b","JSON","stringify","propTypes","content","string","editable","bool","focus","maxLength","number","multiLine","sanitise","caretPosition","oneOf","tagName","oneOfType","func","innerRef","onBlur","onFocus","onKeyDown","onPaste","onChange","styled","defaultProps","Infinity","ContentEditable","constructor","props","setFocus","_element","setCaret","value","state","offset","length","range","document","createRange","selection","window","getSelection","setStart","collapse","removeAllRanges","addRange","_onChange","ev","rawValue","innerText","sanitiseValue","setState","_onPaste","preventDefault","text","clipboardData","getData","substr","execCommand","_onBlur","isFocused","forceUpdate","_onFocus","_onKeyDown","keyCode","currentTarget","blur","_onKeyUp","metaKey","which","replace","componentDidMount","componentWillReceiveProps","nextProps","shouldComponentUpdate","propKeys","filter","componentDidUpdate","val","split","map","line","trim","join","render","Element","c","ref","minHeight","minWidth","display","whiteSpace","wordWrap","wordBreak","style","Date","__html"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// function Example() {\n//   const test = e => {\n//     setAdd(this.refs.add.innerHTML);\n//   };\n\n//   const [add, setAdd] = useState(\"\");\n//   return (\n//     <div>\n//       ã€€<div ref=\"add\" contenteditable=\"true\"></div>\n//       <button onClick={e => test(e)}></button>\n//       {/* <div\n//         contenteditable=\"true\"\n//         dangerouslySetInnerHTML={{ __html: { add } }}\n//       ></div> */}\n//     </div>\n//   );\n// }\n// export default Example;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst reduceTargetKeys = (target, keys, predicate) =>\n  Object.keys(target).reduce(predicate, {});\n\nconst omit = (target = {}, keys = []) =>\n  reduceTargetKeys(target, keys, (acc, key) =>\n    keys.some(omitKey => omitKey === key) ? acc : { ...acc, [key]: target[key] }\n  );\n\nconst pick = (target = {}, keys = []) =>\n  reduceTargetKeys(target, keys, (acc, key) =>\n    keys.some(pickKey => pickKey === key) ? { ...acc, [key]: target[key] } : acc\n  );\n\nconst isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\nconst propTypes = {\n  content: PropTypes.string,\n  editable: PropTypes.bool,\n  focus: PropTypes.bool,\n  maxLength: PropTypes.number,\n  multiLine: PropTypes.bool,\n  sanitise: PropTypes.bool,\n  caretPosition: PropTypes.oneOf([\"start\", \"end\"]),\n  tagName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]), // The element to make contenteditable. Takes an element string ('div', 'span', 'h1') or a styled component\n  innerRef: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onPaste: PropTypes.func,\n  onChange: PropTypes.func,\n  styled: PropTypes.bool // If element is a styled component (uses innerRef instead of ref)\n};\n\nconst defaultProps = {\n  content: \"\",\n  editable: true,\n  focus: false,\n  maxLength: Infinity,\n  multiLine: false,\n  sanitise: true,\n  caretPosition: null,\n  tagName: \"div\",\n  innerRef: () => {},\n  onBlur: () => {},\n  onFocus: () => {},\n  onKeyDown: () => {},\n  onPaste: () => {},\n  onChange: () => {},\n  styled: false\n};\n\nclass ContentEditable extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      value: props.content,\n      isFocused: false\n    };\n  }\n\n  componentDidMount() {\n    this.setFocus();\n    this.setCaret();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.content !== this.sanitiseValue(this.state.value)) {\n      this.setState({ value: nextProps.content }, () => {\n        if (!this.state.isFocused) this.forceUpdate();\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const propKeys = Object.keys(nextProps).filter(key => key !== \"content\");\n    return !isEqual(pick(nextProps, propKeys), pick(this.props, propKeys));\n  }\n\n  componentDidUpdate() {\n    this.setFocus();\n    this.setCaret();\n  }\n\n  setFocus = () => {\n    if (this.props.focus && this._element) {\n      this._element.focus();\n    }\n  };\n\n  setCaret = () => {\n    const { caretPosition } = this.props;\n\n    if (caretPosition && this._element) {\n      const { value } = this.state;\n      const offset = value.length && caretPosition === \"end\" ? 1 : 0;\n      const range = document.createRange();\n      const selection = window.getSelection();\n      range.setStart(this._element, offset);\n      range.collapse(true);\n\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  };\n\n  sanitiseValue(val) {\n    const { maxLength, multiLine, sanitise } = this.props;\n\n    if (!sanitise) {\n      return val;\n    }\n\n    // replace encoded spaces\n    let value = val\n      .replace(/&nbsp;/, \" \")\n      .replace(/[\\u00a0\\u2000-\\u200b\\u2028-\\u2029\\u202e-\\u202f\\u3000]/g, \" \");\n\n    if (multiLine) {\n      // replace any 2+ character whitespace (other than new lines) with a single space\n      value = value.replace(/[\\t\\v\\f\\r ]+/g, \" \");\n    } else {\n      value = value.replace(/\\s+/g, \" \");\n    }\n\n    return value\n      .split(\"\\n\")\n      .map(line => line.trim())\n      .join(\"\\n\")\n      .replace(/\\n{3,}/g, \"\\n\\n\") // replace 3+ line breaks with two\n      .trim()\n      .substr(0, maxLength);\n  }\n\n  _onChange = ev => {\n    const { sanitise } = this.props;\n    const rawValue = this._element.innerText;\n    const value = sanitise ? this.sanitiseValue(rawValue) : rawValue;\n\n    if (this.state.value !== value) {\n      this.setState({ value: rawValue }, () => {\n        this.props.onChange(ev, value);\n      });\n    }\n  };\n\n  _onPaste = ev => {\n    const { maxLength } = this.props;\n\n    ev.preventDefault();\n    const text = ev.clipboardData.getData(\"text\").substr(0, maxLength);\n    document.execCommand(\"insertText\", false, text);\n\n    this.props.onPaste(ev);\n  };\n\n  _onBlur = ev => {\n    const { sanitise } = this.props;\n    const rawValue = this._element.innerText;\n    const value = sanitise ? this.sanitiseValue(rawValue) : rawValue;\n\n    // We finally set the state to the sanitised version (rather than the `rawValue`) because we're blurring the field.\n    this.setState(\n      {\n        value,\n        isFocused: false\n      },\n      () => {\n        this.props.onChange(ev, value);\n        this.forceUpdate();\n      }\n    );\n\n    this.props.onBlur(ev);\n  };\n\n  _onFocus = ev => {\n    this.setState({\n      isFocused: true\n    });\n    this.props.onFocus(ev);\n  };\n\n  _onKeyDown = ev => {\n    const { maxLength, multiLine } = this.props;\n    const value = this._element.innerText;\n\n    // return key\n    if (!multiLine && ev.keyCode === 13) {\n      ev.preventDefault();\n      ev.currentTarget.blur();\n      // Call onKeyUp directly as ev.preventDefault() means that it will not be called\n      this._onKeyUp(ev);\n    }\n\n    // Ensure we don't exceed `maxLength` (keycode 8 === backspace)\n    if (\n      maxLength &&\n      !ev.metaKey &&\n      ev.which !== 8 &&\n      value.replace(/\\s\\s/g, \" \").length >= maxLength\n    ) {\n      ev.preventDefault();\n      // Call onKeyUp directly as ev.preventDefault() means that it will not be called\n      this._onKeyUp(ev);\n    }\n  };\n\n  _onKeyUp = ev => {\n    // Call prop.onKeyDown callback from the onKeyUp event to mitigate both of these issues:\n    // Access to Synthetic event: https://github.com/ashleyw/react-sane-contenteditable/issues/14\n    // Current value onKeyDown: https://github.com/ashleyw/react-sane-contenteditable/pull/6\n    // this._onKeyDown can't be moved in it's entirety to onKeyUp as we lose the opportunity to preventDefault\n    this.props.onKeyDown(ev, this._element.innerText);\n  };\n\n  render() {\n    const {\n      tagName: Element,\n      content,\n      editable,\n      styled,\n      ...props\n    } = this.props;\n\n    return (\n      <Element\n        {...omit(props, Object.keys(propTypes))}\n        {...(styled\n          ? {\n              innerRef: c => {\n                this._element = c;\n                props.innerRef(c);\n              }\n            }\n          : {\n              ref: c => {\n                this._element = c;\n                props.innerRef(c);\n              }\n            })}\n        style={{\n          minHeight: \"0.28rem\",\n          minWidth: \"100%\",\n          display: \"inline-block\",\n          whiteSpace: \"pre-wrap\",\n          wordWrap: \"break-word\",\n          wordBreak: \"break-all\",\n          ...props.style\n        }}\n        contentEditable={editable}\n        key={Date()}\n        dangerouslySetInnerHTML={{ __html: this.state.value }}\n        onBlur={this._onBlur}\n        onFocus={this._onFocus}\n        onInput={this._onChange}\n        onKeyDown={this._onKeyDown}\n        onKeyUp={this._onKeyUp}\n        onPaste={this._onPaste}\n      />\n    );\n  }\n}\n\nContentEditable.propTypes = propTypes;\nContentEditable.defaultProps = defaultProps;\n\nexport default ContentEditable;\n"]},"metadata":{},"sourceType":"module"}