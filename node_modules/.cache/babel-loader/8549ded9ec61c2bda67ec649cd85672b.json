{"ast":null,"code":"import _slicedToArray from \"/Users/guokai/Desktop/React-connect/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/guokai/Desktop/React-connect/src/Prism/Okadia/index.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport \"../CodeTheme/Okadia.css\";\nimport { Editor, EditorState } from \"draft-js\";\n\nfunction App() {\n  const _useState = useState(\"js\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataType = _useState2[0],\n        setDataType = _useState2[1];\n\n  const _useState3 = useState(EditorState.createEmpty()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        previewContent = _useState4[0],\n        setPreviewContent = _useState4[1]; // const [newContent, setnewContent] = useState(\"\");\n\n\n  const handleChange = e => {\n    console.log(e);\n    setPreviewContent(`${e.target.value}`);\n  };\n\n  const onChange = previewContent => {\n    console.log(previewContent);\n    setPreviewContent(previewContent);\n  };\n\n  const newhandleChange = e => {\n    // let element = document.getElementById(\"editableDiv\");\n    // let x = document.getElementById(\"editableDiv\").isContentEditable;\n    // console.log(element.innerHTML);\n    console.log(e.target.innerText); // console.log(x);\n\n    setPreviewContent(e.target.innerText);\n  };\n\n  const handleChangeTypeJS = () => {\n    setDataType(`js`);\n  };\n\n  const handleChangeTypeCSS = () => {\n    setDataType(`css`);\n  };\n\n  const handleChangeTypeC = () => {\n    setDataType(\"c\");\n  };\n\n  useEffect(() => {\n    setTimeout(() => Prism.highlightAll(), 0);\n  });\n\n  const handleSelectChange = e => {\n    setDataType(`${e.target.value}`);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \" \", React.createElement(\"button\", {\n    onClick: newhandleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"click\"), \"\\u4EE3\\u7801\\u533A:\", dataType), React.createElement(\"div\", {\n    style: {\n      width: 500,\n      height: 400,\n      backgroundColor: \"slategray\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    editorState: previewContent,\n    onChange: setPreviewContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \" \", previewContent, \" \"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/guokai/Desktop/React-connect/src/Prism/Okadia/index.jsx"],"names":["React","useState","useEffect","Prism","Editor","EditorState","App","dataType","setDataType","createEmpty","previewContent","setPreviewContent","handleChange","e","console","log","target","value","onChange","newhandleChange","innerText","handleChangeTypeJS","handleChangeTypeCSS","handleChangeTypeC","setTimeout","highlightAll","handleSelectChange","display","width","height","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,yBAAP;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,UAApC;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACmBL,QAAQ,CAAC,IAAD,CAD3B;AAAA;AAAA,QACNM,QADM;AAAA,QACIC,WADJ;;AAAA,qBAE+BP,QAAQ,CAClDI,WAAW,CAACI,WAAZ,EADkD,CAFvC;AAAA;AAAA,QAENC,cAFM;AAAA,QAEUC,iBAFV,kBAKb;;;AAEA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAF,IAAAA,iBAAiB,CAAE,GAAEE,CAAC,CAACG,MAAF,CAASC,KAAM,EAAnB,CAAjB;AACD,GAHD;;AAIA,QAAMC,QAAQ,GAAGR,cAAc,IAAI;AACjCI,IAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AACAC,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACD,GAHD;;AAIA,QAAMS,eAAe,GAAGN,CAAC,IAAI;AAC3B;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASI,SAArB,EAJ2B,CAK3B;;AACAT,IAAAA,iBAAiB,CAACE,CAAC,CAACG,MAAF,CAASI,SAAV,CAAjB;AACD,GAPD;;AAQA,QAAMC,kBAAkB,GAAG,MAAM;AAC/Bb,IAAAA,WAAW,CAAE,IAAF,CAAX;AACD,GAFD;;AAGA,QAAMc,mBAAmB,GAAG,MAAM;AAChCd,IAAAA,WAAW,CAAE,KAAF,CAAX;AACD,GAFD;;AAGA,QAAMe,iBAAiB,GAAG,MAAM;AAC9Bf,IAAAA,WAAW,CAAC,GAAD,CAAX;AACD,GAFD;;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,UAAU,CAAC,MAAMrB,KAAK,CAACsB,YAAN,EAAP,EAA6B,CAA7B,CAAV;AACD,GAFQ,CAAT;;AAGA,QAAMC,kBAAkB,GAAGb,CAAC,IAAI;AAC9BL,IAAAA,WAAW,CAAE,GAAEK,CAAC,CAACG,MAAF,CAASC,KAAM,EAAnB,CAAX;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAsCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAQ,IAAA,OAAO,EAAER,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,yBAEuDZ,QAFvD,CADF,EAiBE;AACE,IAAA,KAAK,EAAE;AACLqB,MAAAA,KAAK,EAAE,GADF;AAELC,MAAAA,MAAM,EAAE,GAFH;AAGLC,MAAAA,eAAe,EAAE;AAHZ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAEpB,cAArB;AAAqC,IAAA,QAAQ,EAAEC,iBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEGD,cAFH,EAEmB,GAFnB,CAPF,CAjBF,CAtCF,CADF;AAgGD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport \"../CodeTheme/Okadia.css\";\nimport { Editor, EditorState } from \"draft-js\";\n\nfunction App() {\n  const [dataType, setDataType] = useState(\"js\");\n  const [previewContent, setPreviewContent] = useState(\n    EditorState.createEmpty()\n  );\n  // const [newContent, setnewContent] = useState(\"\");\n\n  const handleChange = e => {\n    console.log(e);\n    setPreviewContent(`${e.target.value}`);\n  };\n  const onChange = previewContent => {\n    console.log(previewContent);\n    setPreviewContent(previewContent);\n  };\n  const newhandleChange = e => {\n    // let element = document.getElementById(\"editableDiv\");\n    // let x = document.getElementById(\"editableDiv\").isContentEditable;\n    // console.log(element.innerHTML);\n    console.log(e.target.innerText);\n    // console.log(x);\n    setPreviewContent(e.target.innerText);\n  };\n  const handleChangeTypeJS = () => {\n    setDataType(`js`);\n  };\n  const handleChangeTypeCSS = () => {\n    setDataType(`css`);\n  };\n  const handleChangeTypeC = () => {\n    setDataType(\"c\");\n  };\n  useEffect(() => {\n    setTimeout(() => Prism.highlightAll(), 0);\n  });\n  const handleSelectChange = e => {\n    setDataType(`${e.target.value}`);\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {/* -----------------代码input区------------------ */}\n      {/* <div>\n        <div>\n          <ul>\n            <button onClick={handleChangeTypeJS}>JavaScript</button>\n            <button onClick={handleChangeTypeCSS}>CSS</button>\n            <button onClick={handleChangeTypeC}>C++</button>\n            &nbsp; &ensp; &emsp; &ensp; &emsp; &nbsp; &ensp; &emsp;\n            <select name=\"type\" onChange={handleSelectChange}>\n              <option value=\"js\">JavaScript</option>\n              <option value=\"css\">CSS</option>\n              <option value=\"c++\">C++</option>\n            </select>\n          </ul>\n        </div>\n        <textarea\n          value={previewContent}\n          placeholder=\"输入代码...\"\n          type=\"text\"\n          onChange={handleChange}\n          style={{\n            width: 500,\n            height: 400,\n            backgroundColor: \"#f8f8f2\"\n          }}\n        />\n        <div\n          style={{\n            width: \"500px\"\n          }}\n        >\n          <div>正常结果区:</div>\n          {previewContent}\n        </div>\n      </div> */}\n      {/* -----------------代码view区------------------ */}\n\n      <div>\n        <ul>\n          {\" \"}\n          <button onClick={newhandleChange}>click</button>代码区:{dataType}\n        </ul>\n        {/* <div\n          contentEditable=\"plaintext-only\"\n          id=\"editableDiv\"\n          onInput={newhandleChange}\n          // onChange={newhandleChange}\n          value={previewContent}\n          style={{\n            width: 500,\n            height: 400,\n            backgroundColor: \"slategray\"\n          }}\n        ></div> */}\n        <div\n          style={{\n            width: 500,\n            height: 400,\n            backgroundColor: \"slategray\"\n          }}\n        >\n          <Editor editorState={previewContent} onChange={setPreviewContent}>\n            {\" \"}\n            {previewContent}{\" \"}\n          </Editor>\n          {/* <code className=\"language-js\">{previewContent}</code> */}\n        </div>\n        {/* <div style={{ width: 500, height: 400, backgroundColor: \"slategray\" }}>\n          <pre\n            // contentEditable=\"true\"\n            contentEditable=\"plaintext-only\"\n            id=\"editableDiv\"\n            onInput={newhandleChange}\n            // onChange={newhandleChange}\n            value={previewContent}\n            style={{ width: 500, height: 400 }}\n          >\n            <div\n              className={`language-${dataType}`}\n              dangerouslySetInnerHTML={{ __html: previewContent }}\n            />\n            <code\n              contentEditable=\"plaintext-only\"\n              onInput={newhandleChange}\n              className={`language-${dataType}`}\n            >\n              {previewContent}\n            </code>\n            {/* {previewContent} */}\n        {/* </pre> */}\n        {/* </div>  */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}